#!../Python/bin/python
# **************************************************************
##
# Copyright (C), AppViewX, Payoda Technologies
##
# Main appviewx script which will call other scripts for various operations
# to start,stop,restart,repair,license renewall,etc.
##
# This script should be placed in 'script' folder of AppViewX
##
# V 1.0 / 17 December 2014 / Murad / murad.p@payoda.com
##
##
# **************************************************************
import os
import time
import subprocess
from termcolor import colored
try:
    current_file_path = os.path.dirname(os.path.realpath(__file__))
    egg_cache_dir = os.path.join(current_file_path + '/.python_egg_cache')
    if not os.path.exists(egg_cache_dir):
        os.makedirs(egg_cache_dir)
    os.system('chmod g-wx,o-wx ' + egg_cache_dir)
    os.environ['PYTHON_EGG_CACHE'] = egg_cache_dir
except Exception:
    pass

import warnings
import socket
import sys
env_path=os.path.dirname(os.path.realpath(__file__)) + '/'
warnings.filterwarnings("ignore")
if not os.path.realpath(env_path + 'Commons/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Commons/'))
if not os.path.realpath(env_path + 'Mongodb/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Mongodb/'))
if not os.path.realpath(env_path + 'Web/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Web/'))
if not os.path.realpath(env_path + 'Gateway/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Gateway/'))
if not os.path.realpath(env_path + 'Plug/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Plugins/'))
if not os.path.realpath(env_path + 'upgrade/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'upgrade/'))
if not os.path.realpath(env_path + 'Logstash/') in sys.path:
    sys.path.append(os.path.realpath(env_path + 'Logstash/'))
import initialize_common
from initialize_logstash  import Initializelogstash
from initialize_common import InitializeCommon
from initialize_mongodb import InitializeMongoDB
from initialize_plugins import InitializePlugins
from initialize_gateway import InitializeGateway
from initialize_web import InitializeWeb
from ldapcert import LDAPCertificate
from scheduler_operations import SchedulerOperations
from mongodb_setup import print_success
import avx_commons
import getpass
import inspect
import logging
import traceback
import mongodb
import gateway
import web
import plugin
import mongodb_setup
import monitorconfigure
import logstash
import logger
import avx_cert_gen
import appviewx__python
#import hsm_configuration
lggr = logger.avx_logger('AppViewX')
hostname = socket.gethostbyname(socket.gethostname())
lggr.debug('hostname:'+str(hostname))
currentframe = os.path.dirname(os.path.realpath(__file__))
lggr.debug('Script Path:'+str(currentframe))
python_location = currentframe + '/../Python/bin/python '
lggr.debug('Python Path:'+str(python_location))
from config_parser import config_parser
# import updateconf
# from updateconf import UpdateConf
watch = True

class Bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'


def operation_help_fun(operation):
        print(" ERROR in user_input:")
        print(" \t\t 1) ./appviewx %s database" % operation)
        print (" \t\t 2) ./appviewx %s plugins" % operation)
        print (" \t\t 2) ./appviewx %s gateway" % operation)
        print (" \t\t 2) ./appviewx %s web" % operation)
        print (" \t\t 2) ./appviewx %s all" % operation)
        lggr.debug('Invalid user input for appviewx so displaying the help content')
        sys.exit(1)

def help_fun():
    """help_fun display text to guide user
        incase of invalid arguments given
        by user or upon request

    """
    print (""" \n    usage: ./appviewx options [argument] [component-arg] \n \
   basic options:\n \
     \t --start \t \t start the component \n \
     \t --stop \t \t stop the component \n  \
     \t --status \t \t status of the component \n \
     \t --restart \t \t restart the component \n \
     \t --initialize \t \t initilalize the component \n \
     \t --databaseupdate \t update the component related info in the db \n \
     \t --databasebackup \t get a backup of the DB data \n \
     \t --databaserestore \t \t Restore the DB data from an existing backup \n \
     \t --conf-sync \t \t copy the appviewx and plugin conf of the current node across all other nodes \n \
     \t --cert-gen \t \t Generates new self signed certificates across all nodes \n \
     \t --enable-https \t Converts the specified component to HTTPS \n \
     \t --disable-https \t Converts the specified component to HTTP \n \
     \t --avx-cert-gen  \t Generates Initial Root and Intermediate Certificates \n \
     \t --help \t \t show this usage information \n \
   [argument]: \n \
     \t database \t \t avx_platform_database\n \
     \t web \t \t \t avx_platform_web component \n \
     \t plugins \t \t plugins component \n \
     \t gateway \t \t avx_platform_gateway component \n \
     \t scheduler \t \t avx_platform_scheduler component \n \
     \t all \t \t \t all the appviewx components \n \
     \t <ip> \t \t \t all appviewx components of a node \n \
     \n \
   [component-arg] :
     \n \
   example: \n \
     \t  1. appviewx --start avx_platform_database \n \
     \t  2. appviewx --start avx_platform_gateway \n \
     \t  3. appviewx --start avx_platform__web \n \
     \t  4. appviewx --initialize all \n \
     \t  5. appviewx --start all \n \
     \t  6. appviewx --prerequisite \n \
     \t  7. appviewx --databasebackup <backup_folder> \n \
     \t  8. appviewx --databaserestore <db_restore_folder>\n \
     \t  9. appviewx --databaseimport fresh/upgrade \n \
     \t 10. appviewx --databasemigration fresh/upgrade \n \
     \t 11. appviewx --conf-sync \n \
     \t 12. appviewx --databaseupdate \n \
     \t 13. appviewx --cert-gen \n \
     \t 14. appviewx --enable-https gateway/web/plugins/all \n \
     \t 15. appviewx --disable-https gateway/web/plugins/all \n \
     \t 16. appviewx --avx-cert-gen \n \


""")
    sys.exit(1)

where_am_i = os.path.dirname(os.path.realpath(__file__))
try:
    lggr.debug('Parsing the conf file')
    conf_data = config_parser(where_am_i + '/../conf/appviewx.conf')
except KeyboardInterrupt:
    print('Keyboard Interrupt')
    lggr.error('Keyboard Interrupt')
    sys.exit(1)

def stop_python_monitoring_scripts():
    """."""
    cmd_to_kill_silo = "kill -9 `ps x | grep -i python | grep -i silo| grep -v grep | awk '{print $1}'`"
    cmd_to_kill_watchdog = "kill -9 `ps x | grep -i python | grep -i watchdog| grep -v grep | awk '{print $1}'`"
    from using_fabric import AppviewxShell
    for ip, user in zip(conf_data['ENVIRONMENT']['ips'], conf_data['ENVIRONMENT']['username']):
        ob = AppviewxShell([ip], user=user)
        ob.run(cmd_to_kill_silo)
        ob.run(cmd_to_kill_watchdog)

if __name__ == '__main__':

    try:
        try:
            hostname = socket.gethostbyname(socket.gethostname())
        except KeyboardInterrupt:
            print('Keyboard Interrupt')
            lggr.error('Keyboard Interrupt')
            sys.exit(1)
        except Exception as e:
            print (
                Bcolors.FAIL +
                '\n Could not find hostname -i ' +
                Bcolors.ENDC)
            lggr.error('Could not find hostname -i Error: %s:'+str(e))
            sys.exit(1)
        current_username = getpass.getuser()
        current_file = inspect.getfile(inspect.currentframe())
        position = current_username + '@' + hostname + '-' + current_file
        lggr.info('Currently in %s' % position)
        lggr.debug('Currently in %s' % position)
        if os.geteuid() == 0:
            print (Bcolors.FAIL +
                   "\n \tRunning as root user. Terminating \n" +
                   Bcolors.ENDC)
            lggr.error('Running as root user. Terminating')
            sys.exit(1)
        where_am_i = os.path.dirname(os.path.realpath(__file__))
        try:
            lggr.debug('Parsing the conf file')
            conf_data = config_parser(where_am_i + '/../conf/appviewx.conf')
        except KeyboardInterrupt:
            print('Keyboard Interrupt')
            lggr.error('Keyboard Interrupt')
            sys.exit(1)
        except Exception as e:
            print (Bcolors.FAIL +
                   "\n \tCouldn't read appviewx.conf file \n" +
                   Bcolors.ENDC)
            lggr.error("Couldn't read appviewx.conf file and terminating")
            sys.exit(1)
        if '--start' in sys.argv or '--stop' in sys.argv or '--restart' in sys.argv or '--status' in sys.argv:
            user_input = [x.lower() for x in sys.argv]
        else:
            user_input = sys.argv
        user_count = len(user_input)
        if not len(user_input) > 1:
            help_fun()
        print (Bcolors.HEADER + "*" * 80)
        print (Bcolors.HEADER + " \t\t\tAppViewX " +
               conf_data['COMMONS']['version'][0] +
               "  " + user_input[1].strip('-') + "  ")
        print ("*" * 80 + Bcolors.ENDC)
        if user_input[1] == '--prerequisite':
            try:
                status = True
                prerequisite_status = list()
                ips = conf_data['ENVIRONMENT']['ips']
                if len(user_input) >= 3:
                   if not user_input[2] in conf_data['ENVIRONMENT']['ips'] or len(user_input) > 3:
                      print(" ERROR in user_input:")
                      lggr.error("ERROR in user_input")
                      print(" \t\t 1) ./appviewx --prerequisite")
                      print (" \t\t 2) ./appviewx --prerequisite <ip>")
                      sys.exit(1)
                   else:
                      ips = [user_input[2]]
                print('Checking for Prerequiisites')
                for ip in ips:
                    try:
                        lggr.debug("Getting the username and the path for the node %s"%ip)
                        username, path = avx_commons.get_username_path(
                            conf_data,
                            ip)
                    except KeyboardInterrupt:
                        lggr.error('Keyboard Interrupt')
                        print('Keyboard Interrupt')
                        sys.exit(1)
                    except Exception:
                        print("Error in getting username and path for %s" % ip)
                        lggr.error("Error in getting username and path for %s" % ip)
                        continue
                    import using_fabric
                    prerequisite_cmd = path + '/Python/bin/python ' + \
                        path + 'scripts/Commons/prerequisite.py'
                    command = using_fabric.AppviewxShell([ip], user=username)
                    f_obj = command.run(prerequisite_cmd)
                    status, res = avx_commons.return_status_message_fabric(f_obj)
                    if "listening" in res or "not-
                ed" or 'Not Satisified' in res:
                        if "listening" in res or "not-
                    ed" in res:
                           status = False

                        print (res)

                    else:
                        print(
                            "        " + ip + "                :" +
                            Bcolors.OKGREEN +
                            "        Success" +
                            Bcolors.ENDC)
                if len(ips) > 1:
                       seconds_list = list()
                       second_list_orig = list()
                       for ip in ips:
                           if not ip == hostname:
                            cmd = 'ssh -q -oStrictHostKeyChecking=no %s ' % ip
                           else:
                            cmd = ''
                           seconds_list.append(os.popen(cmd + 'date +%s').read().strip())
                           second_list_orig.append(os.popen(cmd + 'date -u').read().strip())
                       seconds_list.sort()
                       if int(seconds_list[0]) + 10 < int(seconds_list[-1]):
                          print (colored("Time is not synchronised in all nodes","red"))
                          print (colored("\t  IP \t\t\t\t Time","red"))
                          for index in range(0,len(ips)):
                              print ("\t " + ips[index] + "\t\t\t" + second_list_orig[index])
                          print (colored("Time difference should not be more than 10 seconds","red"))
                          status = False
                if not status:
                    lggr.error("Prerequisites not satisfied")
                    sys.exit(1)
            except KeyboardInterrupt:
                print('Keyboard Interrupt')
                lggr.error('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--help':
            check_comp_list = [
                'mongodb',
                'plugins',
                'gateway',
                'web']
            if len(user_input) == 3 and user_input[2] in check_comp_list:
                lggr.info("Calling the help function")
                avx_commons.component_help_fun(user_input[2])
            else:
                help_fun()

        elif user_input[1] == '--datetime':
            try:
                import datetime_python
                if len(user_input) == 2:
                    lggr.debug("Getting the data and time")
                    datetime_python.getdatetime(conf_data)
                else:
                    datetime_python.help_fun()
                    lggr.error('Wrong Input')
            except KeyboardInterrupt:
                print('Keyboard Interrupt')
                lggr.error('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--keygen':
            try:
                if not len(user_input) == 2:
                    help_fun()
                else:
                    nodes_str = ','.join(conf_data['ENVIRONMENT']['ips'])
                    users_str = ','.join(conf_data['ENVIRONMENT']['username'])
                    ports_str = ','.join(conf_data['ENVIRONMENT']['ssh_port'])
                    keygen_cmd = current_file_path + '/../Python/bin/python ' + current_file_path + '/Commons/keygen.py ' +\
                        nodes_str + ' ' + users_str + ' ' + ports_str
                    ps = subprocess.run(keygen_cmd, shell=True)
                    if not ps.returncode:
                        print(colored('SSH Keys passed successfully between nodes.'))
                        lggr.debug('SSH Keys passed successfully between nodes.')
                    else:
                        print('Some error in passing SSH keys.')
                        lggr.debug('Some error in passing SSH keys.')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] in ["--restart", "--stop", "--status", "--start"]:
            if not len(user_input) > 2:
                lggr.error("Wrong Input by the user")
                help_fun()
            user_input[2] = user_input[2].lower()
            if user_input[2].lower() in ['scheduler', 'avx-scheduler', 'avx_platform_scheduler']:
                try:
                  from scheduler_operations import SchedulerOperations
                  ob =SchedulerOperations(user_input[1:], conf_data)
                  ob.operation()
                except Exception as e:
                  sys.exit(1)

            elif user_input[2].lower() == 'monitor':
                try:
                    from updateconf import UpdateConf
                    if user_input[1] == '--stop':
                        stop_python_monitoring_scripts()
                        ob = UpdateConf(on=False)
                        ob.initialize()
                        print_success('Monitor', 'Stopped')
                    elif user_input[1] == '--start':
                        ob = UpdateConf()
                        ob.initialize()
                        from scheduler_monitor import SchedulerMonitor
                        ob = SchedulerMonitor()
                        ob.check_monitoring_process()
                        print_success('Monitor', 'Started')
                    else:
                        help_fun()
                except Exception as e:
                    lggr.error('Unable to do monitoring operation')

            elif user_input[2].lower() in ['mongodb','database', 'avx_platform_database']:
                try:
                    user_input[2] = 'mongodb'
                    mongodb = mongodb.MongoDB(
                        user_input[1:],
                        conf_data, auth=True)
                    lggr.info('Starting the Mongodb')
                    lggr.debug('Starting the Mongodb')
                    mongodb.operation()
                except KeyboardInterrupt:
                    print('Keyboard Interrupt')
                    lggr.error('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            elif user_input[2].lower() in ['avx_platform_logs']:
                try:
                    user_input[2] = 'logstash'
                    logstash = logstash.Logstash(
                        user_input[1:],
                        conf_data)
                    lggr.info('Starting the Logstash')
                    lggr.debug('Starting the Logstash')
                    logstash.operation()
                except KeyboardInterrupt:
                    print('Keyboard Interrupt')
                    lggr.error('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            elif user_input[2].lower() in ['web', 'avx_platform_web']:
                try:
                    web = web.Web(user_input[1:], conf_data)
                    if user_input[2] in conf_data['ENVIRONMENT']['ips']:
                            user_input_as_str = user_input[2]
                    else:
                            user_input_as_str = ''.join(user_input[3:])
                    lggr.info('Starting the Web')
                    lggr.debug('Starting the Web')
                    web.operation()
                except KeyboardInterrupt:
                    print('Keyboard Interrupt')
                    lggr.error('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            elif user_input[2].lower() in ['gateway', 'avx_platform_gateway']:
                try:
                    if user_input[1] in ['--stop', '--status']:
                        gateway = gateway.Gateway(user_input[1:], conf_data)
                        lggr.info('Doing the ' + user_input[1].strip("--") + 'operation on Gateway')
                        lggr.debug('Doing the ' + user_input[1].strip("--") + 'operation on Gateway')
                        gateway.operation()
                        #if 'stop'in user_input[1]:
                            #web = web.Web(user_input[1:], conf_data)
                            #web.operation()
                    else:
                        if user_input[2] in conf_data['ENVIRONMENT']['ips']:
                            user_input_as_str = user_input[2]
                        else:
                            user_input_as_str = ''.join(user_input[3:])
                        if user_input[1] == '--restart':
                           user_input[1] = '--stop'
                           gateway_obj = gateway.Gateway(user_input[1:], conf_data)
                           gateway_obj.operation()
                           del gateway_obj
                           user_input[1] ='--start'
                        gateway_obj = gateway.Gateway(user_input[1:], conf_data)
                        gateway_obj.operation()
                except KeyboardInterrupt:
                    lggr.error('Keyboard Interrupt')
                    print('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            elif user_input[2] == 'plugins':
                try:
                    lggr.info('Starting the Plugins')
                    lggr.debug('Starting the Plugins')
                    plugins = plugin.Plugin(user_input[1:], conf_data)
                    plugins.operation()
                except KeyboardInterrupt:
                    lggr.error('Keyboard Interrupt')
                    print('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            elif user_input[2] == 'all' or user_input[2] in conf_data['ENVIRONMENT']['ips']:
                if user_input[2] == 'all' and len(user_input) > 3:
                   operation_help_fun(user_input[1])
                if user_input[1] == '--stop' and user_input[2] == 'all':
                    # from updateconf import UpdateConf
                    import configparser
                    stop_python_monitoring_scripts()
                    file = currentframe + '/../conf/monitor.conf'
                    config = configparser.ConfigParser()
                    config.read(file)
                    config.set('CONFIGURATION', 'monitor', 'false')
                    with open(file, 'w+') as configfile:
                        config.write(configfile)
                    # ob = UpdateConf(on=False)
                    # ob.initialize()
                try:
                    if user_input[1] == '--restart':
                        lggr.debug("Starting the process for restarting all the components")
                        avx_operations = ['--stop', '--start']
                    else:
                        avx_operations = [user_input[1]]
                    for each_operation in avx_operations:
                        user_input[1] = each_operation
                        if len(user_input) == 3 and user_input[2] in conf_data['ENVIRONMENT']['ips']:
                                user_input.insert(2,'operation')
                        if user_input[1] in ["--start", "--stop", "--status"]:
                            sch_ob =SchedulerOperations(user_input[1:], conf_data)
                            mongodb_obj = mongodb.MongoDB(
                                user_input[1:], conf_data)
                            plugins_obj = plugin.Plugin(
                                user_input[1:], conf_data)
                            gateway_obj = gateway.Gateway(
                                user_input[1:], conf_data)
                            logstash_obj = logstash.Logstash(
                                user_input[1:], conf_data)
                            web_obj = web.Web(user_input[1:], conf_data)
                            if not user_input[1] == '--stop':
                                lggr.debug('Doing the ' + user_input[1].strip("--") + 'for all the components')
                                mongodb_obj.operation()
                                plugins_obj.operation()
                                comp_timeout = 0
                                if user_input[2] in conf_data['ENVIRONMENT']['ips']:
                                    user_input_as_str = user_input[2]
                                else:
                                    user_input_as_str = ''.join(user_input[3:])
                                if user_input[1] == '--start':
                                    comp_stat = './appviewx --status plugins avx_platform_core'
                                    print (colored("Waiting for avx_platform_core and avx_platform_queue to be started(It may take upto 2 mins)", "cyan"))
                                    lggr.debug("Waiting for gateway to be started(It may take upto 2 mins)")
                                    t_end = time.time() + 60 * 2
                                    while time.time() < t_end:
                                        ps = subprocess.Popen(
                                            comp_stat, shell=True,
                                            stdout=subprocess.PIPE,
                                            stderr=subprocess.STDOUT)
                                        result = ps.communicate()[0].decode("utf-8")
                                        result= result.split('\n')[3:-2]
                                        result = [ True for res in result if 'Not Running' not in res ]
                                        if result:
                                            lggr.debug('avx_platform_core in Not Runnning')
                                            break
                                    comp_stat = './appviewx --status plugins avx_platform_queue'
                                    lggr.debug("Waiting for gateway to be started(It may take upto 2 mins)")
                                    t_end = time.time() + 60 * 2
                                    while time.time() < t_end:
                                        ps = subprocess.Popen(
                                            comp_stat, shell=True,
                                            stdout=subprocess.PIPE,
                                            stderr=subprocess.STDOUT)
                                        result = ps.communicate()[0].decode("utf-8")
                                        result= result.split('\n')[3:-2]
                                        result = [ True for res in result if 'Not Running' not in res ]
                                        if result:
                                            lggr.debug('avx_platform_queue in Not Runnning')
                                            break
                                gateway_obj.operation()
                                logstash_obj.operation()
                                web_obj.operation()
                                sch_ob.operation()
                            else:
                                lggr.debug('Doing the ' + user_input[1].strip("--") + 'for all the components')
                                sch_ob.operation()
                                web_obj.operation()
                                logstash_obj.operation()
                                gateway_obj.operation()
                                plugins_obj.operation()
                                mongodb_obj.operation()
                            """if user_input[1] == '--status':
                              from scheduler_operations import SchedulerOperations
                              ob =SchedulerOperations(user_input[1:], conf_data)
                              ob.operation()"""
                        else:
                            help_fun()
                            lggr.error('Wrong Input')
                except KeyboardInterrupt:
                    lggr.error('Keyboard Interrupt')
                    print('Keyboard Interrupt')
                    sys.exit(1)
                except Exception as e:
                    print (e)
                    lggr.error(e)
            else:
                help_fun()
                lggr.error('Wrong Input')
            if '--status' not in user_input and 'monitor' not in user_input:
              import monitorconfigure
              if len(user_input) == 3:
                user_input.append('all')
              monitorconfigure.watchdog(user_input[1:])
        elif user_input[1].lower() in  ['--dbbackup','--databasebackup']:
            try:
                import db_backup_restore
                if 2 <=len(user_input) <= 4:
                    lggr.debug("Doing the Db backup")
                    lggr.info("Doing the Db backup")
                    db_backup_restore.dbbackup(user_input[2:], conf_data)
                else:
                    db_backup_restore.help_fun()
                    lggr.error('Wrong Input')
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1].lower() in ['--dbrestore','--databaserestore']:
            try:
                import db_backup_restore
                if len(user_input) == 3:
                    lggr.debug("Doing the Db Restore")
                    lggr.info("Doing the Db Restore")
                    db_backup_restore.dbrestore(user_input[2:], conf_data)
                else:
                    db_backup_restore.help_fun()
                    lggr.error('Wrong Input')
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--initialize':
            try:
                if len(user_input) > 3:
                    initialize_common.help_fun()
                try:
                    username, path = avx_commons.get_username_path(conf_data, hostname)
                except Exception:
                    print(colored("Error in getting username and path for %s" % hostname,"red"))
                    sys.exit(1)
                if not os.path.isfile(path + '/avxgw/Gateway_key.txt'):
                    print(colored("License file(Gateway_key.txt is missing in the %s directory" % (path + '/avxgw/'),"red"))
                    lggr.error("License file(Gateway_key.txt is missing in the %s directory" % (path + '/avxgw/'))
                    sys.exit(1)
                if not len(user_input) <= 2:
                    component = user_input[2]
                else:
                    initialize_common.help_fun()
                    lggr.error("Wrong input")
                    sys.exit(1)
                comp_list = []
                precomp_list = [
                            'database',
                            'common',
                            'plugins',
                            'gateway',
                            'avx_platform_logs',
                            'web']
                if component == 'all':
                    comp_list = [
                        'mongodb',
                        'common',
                        'plugins',
                        'gateway',
                        'avx_platform_logs',
                        'web']
                else:
                    comp_list = [component]
                    if component not in precomp_list:
                       lggr.error("Trying the operation for an invalid component")
                       initialize_common.help_fun()
                       sys.exit(1)
                fresh = True
                if os.path.isdir(path + '/db/mongodb/data/db/') and len(os.listdir(path + '/db/mongodb/data/db')):
                   fresh = False
                lggr.debug("Starting the Commons initialization")
                lggr.info("Starting the Commons initialization")
                InitializeCommon.initialize(InitializeCommon())
                print_success('Core Components', 'Initialized')
                if 'mongodb'in comp_list or 'database' in comp_list:
                    lggr.debug("Starting the Mongodb initialization")
                    lggr.info("Starting the Mongodb initialization")
                    InitializeMongoDB.initialize(InitializeMongoDB())
                    print_success('avx_platform_database', 'Initialized')
                if 'plugins' in comp_list:
                    lggr.debug("Starting the Plugins initialization")
                    lggr.info("Starting the Plugins initialization")
                    InitializePlugins.initialize(InitializePlugins())
                    print_success('avx_subsytems', 'Initialized')
                if 'avx_platform_logs' in comp_list:
                    lggr.debug("Starting the Logstash initialization")
                    lggr.info("Starting the Logstash initialization")
                    Initializelogstash.initialize(Initializelogstash())
                    #obj.initialize()
                    print_success('avx_platform_logs', 'Initialized')
                if 'gateway' in comp_list:
                    lggr.debug("Starting the Gateway initialization")
                    lggr.info("Starting the Gateway initialization")
                    InitializeGateway.initialize(InitializeGateway())
                    print_success('avx_platform_gateway', 'Initialized')
                if 'web' in comp_list:
                    lggr.debug("Starting the Web initialization")
                    lggr.info("Starting the Web initialization")
                    InitializeWeb.initialize(InitializeWeb())
                    print_success('avx_platform_web', 'Initialized')
                if not fresh:
                    try:
                        InitializeCommon.update_db(InitializeCommon())
                        from plugin import Plugin
                        Plugin.gw_reload(Plugin([], conf_data))
                    except:
                        lggr.error('Unable to perform db update')
                from updateconf import UpdateConf
                ob = UpdateConf()
                ob.initialize()
            except KeyboardInterrupt:
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--databaseupdate':
            try:
                if len(user_input) > 2:
                    help_fun()
                    sys.exit(1)
                lggr.debug("Starting the process for db Update")
                lggr.info("Starting the process for db Update")
                InitializeCommon.update_db(InitializeCommon())
                print(colored('Database update completed', 'green'))
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                sys.exit(1)

        elif user_input[1] == '--plugin-dbscripts':
            try:
                if len(user_input) > 2:
                    help_fun()
                    sys.exit(1)
                lggr.debug("Starting the process for plugin db scripts")
                lggr.info("Starting the process for plugin db scripts")
                from plugin_dbscripts import PluginScripts
                print_success('Release scripts execution', 'Started')
                PluginScripts.initialize(PluginScripts())
                print_success('Release scripts execution', 'Completed')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                sys.exit(1)

        elif user_input[1] == '--enable-https':
            try:
                from http_https import Convert
                if not len(user_input) == 3:
                    help_fun()
                    sys.exit(1)

                ob = Convert(user_input[-1], 'HTTPS')
                ob.operation()

            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                sys.exit(1)

        elif user_input[1] == '--disable-https':
            try:
                from http_https import Convert
                if not len(user_input) == 3:
                    help_fun()
                    sys.exit(1)
                ob = Convert(user_input[-1], 'HTTP')
                ob.operation()
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                sys.exit(1)

        elif user_input[1] == '--
    ':
            try:
                license_folder = currentframe + '/../avxgw/'
                files_to_check = ['avxgw', 'Gateway_key.txt', 'acf-admin-1.0.0.jar']
                for each_file in files_to_check:
                    if not os.path.isfile(license_folder + each_file):
                        lggr.error('%s not found in avxgw directory' % each_file)
                        print('%s not found in avxgw directory' % each_file)
                        sys.exit(1)
                help_called = False
                if len(user_input) == 4:
                    if not os.path.exists(user_input[-1]) and not user_input[-1].startswith('/'):
                        sys.exit(1)
                    else:
                        """cmd = currentframe + '/../Python/bin/python ' + currentframe + \
                            '/upgrade/plugin_upgrade.py ' + os.path.abspath(user_input[-1])
                        subprocess.run(cmd, shell=True)"""
                        file_location = os.path.abspath(user_input[-1])

                        for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                              copy_command = "rsync -avz " + file_location + " " + conf_data['ENVIRONMENT']['ssh_hosts'][index] + '/patch/AppViewX_Patch/'
                              print('{0:25}  {1:12} {2:20}'.format('Copying plugins to', ':', conf_data['ENVIRONMENT']['ips'][index]))
                              import using_fabric
                              command = using_fabric.AppviewxShell([hostname], user=getpass.getuser())
                              f_obj = command.run(copy_command)

                        for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                              print('{0:25}  {1:12} {2:20}'.format('Extracting plugins on', ':', conf_data['ENVIRONMENT']['ips'][index]))
                              extract_command = "tar -xvf " +  conf_data['ENVIRONMENT']['path'][index] + '/patch/AppViewX_Patch/*.tar.gz -C ' + conf_data['ENVIRONMENT']['path'][index] + '/patch/AppViewX_Patch/.'
                              import using_fabric
                              command = using_fabric.AppviewxShell([conf_data['ENVIRONMENT']['ips'][index]], user=conf_data['ENVIRONMENT']['username'][index])
                              f_obj = command.run(extract_command)
                              status, res = avx_commons.return_status_message_fabric(f_obj)
                        plugins = os.listdir(current_file_path + '/../patch/AppViewX_Patch/Plugins/')
                        advanced_plugin_path = current_file_path + '/../patch/AppViewX_Patch/Plugins/'
                        failed_plugins = list()
                        #print (plugins)
                        for plugin in plugins:
                            plugin_dependency_location = advanced_plugin_path + '/' + plugin + '/' + plugin + '_dependencies'
                            if os.path.exists(plugin_dependency_location):
                              from get_dependencies import Get_dependencies
                              from dependency_check import dependency_check
                              dependency_data = Get_dependencies.obtain_plugin_dependencies(Get_dependencies(),plugin_dependency_location)
                              dependency_result = dependency_check(dependency_data)
                              if not len(dependency_result) == 0:
                                failed_plugins.append(plugin)
                        if len(failed_plugins):
                            print (colored('The dependencies for the plugins are below mentioned plugins are not matched','red'))
                            print (','.join(failed_plugins))
                            sys.exit(1)
                        for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                              print('{0:25}  {1:12} {2:20}'.format('Updating plugins on', ':', conf_data['ENVIRONMENT']['ips'][index]))
                              import using_fabric
                              command = using_fabric.AppviewxShell([conf_data['ENVIRONMENT']['ips'][index]], user=conf_data['ENVIRONMENT']['username'][index])
                              update_command = conf_data['ENVIRONMENT']['path'][index] + '/Python/bin/python ' + ' ' + conf_data['ENVIRONMENT']['path'][index] + '/scripts/upgrade/plugin_upgrade.py ' + user_input[-1]
                              f_obj = command.run(update_command)
                              status, res = avx_commons.return_status_message_fabric(f_obj)

                        InitializeCommon.initialize(InitializeCommon())
                        print_success('Common Compnents', 'Initialized')
                        InitializePlugins.initialize(InitializePlugins())
                        print_success('Plugins', 'Initialized')

                        from plugin import Plugin
                        import tarfile
                        tar = tarfile.open(user_input[-1])
                        plugs_to_start = []
                        tar_files  = tar.getmembers()
                        for plugs in tar_files:
                            if plugs.name.endswith('.jar') and 'framework' not in plugs.name:
                                plugs_to_start.append(plugs.name.split('/')[-1].split('.')[0])

                        for plugs in plugs_to_start:
                            ob = Plugin(['--start', 'plugins', plugs], conf_data)
                            ob.operation()
                    result = 0

                elif len(user_input) == 2:
                    python_location = currentframe + '/../Python/bin/python '
                    lggr.debug("Calling the appviewx_
                )python script")
                    lggr.info("Calling the appviewx_
                )python script")
                    result = os.system(
                        python_location + currentframe + "/Commons/appviewx_
                    _python.py")
                else:
                    help_fun()
                    lggr.error('Wrong Input')
                    help_called = True
                if result == 0:
                    print (
                        Bcolors.OKBLUE +
                        "
                    ation completed" +
                        Bcolors.ENDC)
                    lggr.info('
                ation Completed Successfully')
                    lggr.debug('
                ation Completed Successfully')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1].lower() in  ['--dbimport','--databaseimport']:
            try:
                lggr.info("Starting the process of dbimport ")
                currentframe = os.path.dirname(os.path.realpath(__file__))
                python_location = currentframe + '/../Python/bin/python '
                from avx_commons import mongo_status
                for ip, port in zip(conf_data['MONGODB']['ips'],
                                    conf_data['MONGODB']['ports']):
                    lggr.debug("Checking the mongodb status")
                    stat = mongo_status(ip, port, authentication=True)
                    if 'not_running' in stat or 'no_primary' in stat or 'no_replication' in stat:
                        lggr.error('Error in mongodb : ')
                        print('db is not running!')
                        sys.exit(1)

                if len(user_input) == 3:
                    if not user_input[2] == 'fresh':
                        lggr.debug("Wrong input for dbimport")
                        mongodb_setup.db_import_help_fun()
                    else:
                        commands = [python_location + currentframe + '/Mongodb/mongodb_setup.py --dbimport gridfs',
                                    python_location + currentframe + '/Mongodb/mongodb_setup.py --dbimport Master_Scripts',
                                    python_location + currentframe + '/Mongodb/mongodb_setup.py --dbimport fresh']
                        for cmd in commands:
                            lggr.debug('Executing the command :' + cmd)
                            if os.system(cmd):
                                lggr.error('Error in execution of command : ' + cmd)
                                sys.exit(1)
                elif len(user_input) == 4:
                    if user_input[2] == 'status':
                        if not user_input[3] in ['fresh', 'upgrade']:
                            lggr.error("Wrong input")
                            mongodb_setup.db_status_help_fun()
                        else:

                            os.system(python_location + currentframe + '/Mongodb/mongodb_setup.py --dbimport status ' + user_input[3])
                    elif not user_input[2] == 'upgrade':
                        lggr.error('Wrong input')
                        mongodb_setup.db_import_help_fun()
                    else:
                        try:
                            release_dir = os.listdir(currentframe + '/../release_scripts')
                            release_dir = [directory for directory in release_dir if directory.split('_')[-1] == user_input[3]]
                            if not len(release_dir):
                                lggr.error('Release_%s  directory is not found in %s ' % (user_input[3],currentframe + '/../release_scripts'))
                                print (colored('Release_%s  directory is not found in %s ' % (user_input[3],currentframe + '/../release_scripts'),"red"))
                                sys.exit(1)
                            os.system(python_location + currentframe + '/Mongodb/mongodb_setup.py --dbimport upgrade ' + user_input[3])
                        except KeyboardInterrupt:
                            lggr.error('Keyboard Interrupt')
                            sys.exit(1)
                if len(user_input) > 4 or len(user_input) < 3:
                    lggr.error('Wrong input')
                    mongodb_setup.db_import_help_fun()
            except KeyboardInterrupt:
                    lggr.error('Keyboard Interrupt')
                    print(colored('Keyboard Interrupt', 'red'))
                    sys.exit(1)
            except Exception as e:
                    print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                    lggr.error(e)
                    sys.exit(1)
        elif user_input[1] == '--dbstart':
            if len(user_input) > 2:
               lggr.error("Error in user input")
               print(" ERROR in user_input:")
               print(" \t\t 1) ./appviewx --dbstart")
               sys.exit(1)
            try:
                os.system(
                    python_location + currentframe + '/Commons/appviewx_dbstart_python.py')
                lggr.debug('Calling appviewx_dbstart_python')
                lggr.info('Calling appviewx_dbstart_python')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (e)
                

        elif user_input[1].lower() in ['--databasemigration','--jarmigration']:
            try:
                currentframe = os.path.dirname(os.path.realpath(__file__))
                python_location = currentframe + '/../Python/bin/python '
                if len(user_input) == 3:
                    if not user_input[2] == 'fresh':
                        lggr.debug('Wrong Input')
                        mongodb_setup.help_fun()
                    else:
                        try:
                            lggr.debug('Calling mongodb_setup.py --jarmigration fresh')
                            os.system(python_location + currentframe + '/Mongodb/mongodb_setup.py --jarmigration fresh')
                        except KeyboardInterrupt:
                            lggr.error('Keyboard Interrupt')
                            sys.exit(1)
                elif len(user_input) == 4:
                    if user_input[2] == 'status':
                        if not user_input[3] in ['fresh', 'upgrade']:
                            lggr.error('Wrong user input')
                            mongodb_setup.help_fun()
                        else:
                            lggr.debug("Calling mongodb_setup.py --jarmigration status " + user_input[3])
                            os.system(python_location + currentframe + '/Mongodb/mongodb_setup.py --jarmigration status ' + user_input[3])
                    elif not user_input[2] == 'upgrade':
                        mongodb_setup.help_fun()
                        lggr.error('Wrong user input')
                    else:
                        try:
                            release_dir = os.listdir(currentframe + '/../release_scripts')
                            release_dir = [directory for directory in release_dir if directory.split('_')[-1] == user_input[3]]
                            if not len(release_dir):
                                lggr.error('Release_%s  directory is not found in %s ' % (user_input[3],currentframe + '/../release_scripts'))
                                print (colored('Release_%s  directory is not found in %s ' % (user_input[3],currentframe + '/../release_scripts'),"red"))
                                sys.exit(1)
                            lggr.debug('Caling mongodb_setup.py --jarmigration upgrade ' + user_input[3])
                            os.system(python_location + currentframe + '/Mongodb/mongodb_setup.py --jarmigration upgrade ' + user_input[3])
                        except KeyboardInterrupt:
                            lggr.error('Keyboard interrupt')
                            sys.exit(1)
                else:
                    mongodb_setup.help_fun()
                    lggr.error('Wrong Input')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--gwrefresh':
           try:
               plugins = plugin.Plugin(user_input[1:], conf_data)
               if len(user_input) > 2:
                  plugin.reload_help_fun()
               plugins.gw_reload()
           except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
           except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)

        elif user_input[1] == '--license':
            try:
                currentdir = os.path.dirname(os.path.realpath(__file__))
                python_location = currentdir + '/../Python/bin/python '
                if len(user_input) == 4 and user_input[2] == 'renew':
                    lggr.debug('Starting the process for license Renew')
                    cmd_for_license_renew = python_location + 'Gateway/license_renew.py ' + user_input[3]
                    if os.system(cmd_for_license_renew):
                        lggr.error('Error in executing the cmd :' + cmd_for_license_renew)
                        sys.exit(1)
                else:
                    import license_renew
                    lggr.error('Wrong Input by the user')
                    license_renew.help_fun()
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--repair':
            if len(user_input) < 3:
                help_fun()
                lggr.error('Wrong Input')
                sys.exit(1)
            try:
                if user_input[2] == 'mongodb':
                    try:
                        import db_repair_python
                    except Exception as e:
                        print (e)
                        lggr.error(e)
                        sys.exit(1)
                    if len(user_input) > 4:
                        db_repair_python.help_fun()
                        lggr.error('Wrong Input')
                        sys.exit(1)
                    else:
                        lggr.debug('Starting the process for db repair')
                        db_repair_python.mongodb_repair(
                            conf_data, user_input[3:])

                else:
                    help_fun()
                    lggr.error('Wrong Input')
                    sys.exit(1)
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--upgrade':
          if len(user_input) < 3:
              help_fun()
          else:
              if len(user_input) == 4 and user_input[2].lower() == 'plugins':
                file_location = user_input[-1]
                import tarfile
                if not os.path.exists(file_location):
                  print (colored('The mentioned file is not available',"red"))
                  sys.exit(1)
                else:
                  tar = tarfile.open(file_location)
                  plugs_to_stop = []
                  tar_files  = tar.getmembers()
                  for plugs in tar_files:
                      if plugs.name.endswith('.jar') and plugs.name.split('/')[-1].split('.')[0] in conf_data['PLUGINS']['plugins']:
                          plugs_to_stop.append(plugs.name.split('/')[-1].split('.')[0])

                  for plugs in plugs_to_stop:
                      plugins_obj = plugin.Plugin(['--stop','plugins', plugs], conf_data)
                      plugins_obj.operation()

                  for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                      copy_command = "rsync -avz " + file_location + " " + conf_data['ENVIRONMENT']['ssh_hosts'][index] + '/patch/AppViewX_Patch/'
                      print('{0:25}  {1:12} {2:20}'.format('Copying plugins to', ':', conf_data['ENVIRONMENT']['ips'][index]))
                      import using_fabric
                      command = using_fabric.AppviewxShell([hostname], user=getpass.getuser())
                      f_obj = command.run(copy_command)

                  for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                      print('{0:25}  {1:12} {2:20}'.format('Extracting plugins on', ':', conf_data['ENVIRONMENT']['ips'][index]))
                      extract_command = "tar -xvf " +  conf_data['ENVIRONMENT']['path'][index] + '/patch/AppViewX_Patch/*.tar.gz -C ' + conf_data['ENVIRONMENT']['path'][index] + '/patch/AppViewX_Patch/.'
                      import using_fabric
                      command = using_fabric.AppviewxShell([conf_data['ENVIRONMENT']['ips'][index]], user=conf_data['ENVIRONMENT']['username'][index])
                      f_obj = command.run(extract_command)
                      status, res = avx_commons.return_status_message_fabric(f_obj)
                  plugins = os.listdir(current_file_path + '/../patch/AppViewX_Patch/Plugins/')
                  advanced_plugin_path = current_file_path + '/../patch/AppViewX_Patch/Plugins/'
                  failed_plugins = list()
                  #print (plugins)
                  for plugin in plugins:
                    plugin_dependency_location = advanced_plugin_path + '/' + plugin + '/' + plugin + '_dependencies'
                    if os.path.exists(plugin_dependency_location):
                      from get_dependencies import Get_dependencies
                      from dependency_check import dependency_check
                      dependency_data = Get_dependencies.obtain_plugin_dependencies(Get_dependencies(),plugin_dependency_location)
                      dependency_result = dependency_check(dependency_data)
                      if not len(dependency_result) == 0:
                        failed_plugins.append(plugin)
                  if len(failed_plugins):
                    print (colored('The dependencies for the plugins are below mentioned plugins are not matched','red'))
                    print (','.join(failed_plugins))
                    sys.exit(1)
                  for index in range(len(conf_data['ENVIRONMENT']['ips'])):
                      print('{0:25}  {1:12} {2:20}'.format('Updating plugins on', ':', conf_data['ENVIRONMENT']['ips'][index]))
                      import using_fabric
                      command = using_fabric.AppviewxShell([conf_data['ENVIRONMENT']['ips'][index]], user=conf_data['ENVIRONMENT']['username'][index])
                      update_command = conf_data['ENVIRONMENT']['path'][index] + '/Python/bin/python ' + ' ' + conf_data['ENVIRONMENT']['path'][index] + '/scripts/upgrade/plugin_upgrade.py ' + user_input[-1]
                      f_obj = command.run(update_command)
                      status, res = avx_commons.return_status_message_fabric(f_obj)
                  username, path = avx_commons.get_username_path(conf_data, hostname)
                  component = 'plugins'
                  comp_list = []
                  precomp_list = [
                              'mongodb',
                              'database',
                              'common',
                              'plugins',
                              'gateway',
                              'web']
                  if component == 'all':
                      comp_list = [
                          'mongodb',
                          'common',
                          'plugins',
                          'gateway',
                          'web']
                  else:
                      comp_list = [component]
                      if component not in precomp_list:
                         lggr.error("Trying the operation for an invalid component")
                         initialize_common.help_fun()
                         sys.exit(1)
                  fresh = True
                  if os.path.isdir(path + '/db/mongodb/data/db/') and len(os.listdir(path + '/db/mongodb/data/db')):
                     fresh = False
                  lggr.debug("Starting the Commons initialization")
                  lggr.info("Starting the Commons initialization")
                  InitializeCommon.initialize(InitializeCommon())
                  print_success('Common Components', 'Initialized')
                  if 'plugins' in comp_list:
                      lggr.debug("Starting the Plugins initialization")
                      lggr.info("Starting the Plugins initialization")
                      InitializePlugins.initialize(InitializePlugins())
                      print_success('Plugins', 'Initialized')
                  if 'gateway' in comp_list:
                      lggr.debug("Starting the Gateway initialization")
                      lggr.info("Starting the Gateway initialization")
                      InitializeGateway.initialize(InitializeGateway())
                      print_success('Gateway', 'Initialized')
                  if not fresh:
                      InitializeCommon.update_db(InitializeCommon())
                      from plugin import Plugin
                  for plugs in plugs_to_stop:
                      plugins_obj = Plugin(['--start','plugins', plugs], conf_data)
                      plugins_obj.operation()
                  plugins_obj.gw_reload()

              else:
                  cmd = current_file_path + '/../Python/bin/python ' + current_file_path + '/Commons/appviewx_upgrade_python.py ' + user_input[-1] 
                  subprocess.run(cmd, shell=True)

        elif user_input[1] == '--conf-sync':
            try:
                multinode = conf_data['ENVIRONMENT']['multinode'][0]
                if multinode.upper() == 'FALSE':
                    print('Conf Sync can be done only in case of multinode setup')
                    lggr.debug('Conf Sync can be done only in case of multinode setup')
                else:
                    from conf_sync import ConfSync
                    import conf_sync
                    if not len(user_input) == 2:
                        conf_sync.help_fun()
                        lggr.error('Wrong Input')
                        sys.exit(1)
                    lggr.debug('Starting the process Conf Sync')
                    ConfSync.initialize(ConfSync())
                    print ("\nSynchronize configuration - Completed\n")
                    lggr.debug('Synchronize configuration - Completed')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--cert-gen':
            try:
                if len(user_input) > 2:
                    help_fun()
                    sys.exit(1)
                else:
                    InitializeCommon.check_certificates(InitializeCommon())
                    print('New self-signed certificates created.')
                    lggr.info('New self-signed certificates created.')
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] == '--avx-cert-gen':
            try:
                if len(user_input) > 2:
                    help_fun()
                    sys.exit(1)
                else:
                    avx_cert_gen.initialise(True)
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        elif user_input[1] in ['--enable-monitor','--disable-monitor']:
            try:
                if len(user_input) > 2:
                    help_fun()
                    sys.exit(1)
                else:
                    if user_input[1] == '--enable-monitor':
                        monitorconfigure.update_monitor_conf('True')
                        print (Bcolors.OKGREEN + 'Process monitor has been enabled' + Bcolors.ENDC)
                    else:
                        monitorconfigure.update_monitor_conf('False')
                        print (Bcolors.OKGREEN + 'Process monitor has been disabled' + Bcolors.ENDC)
            except KeyboardInterrupt:
                lggr.error('Keyboard Interrupt')
                print('Keyboard Interrupt')
                sys.exit(1)
            except Exception as e:
                print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
                lggr.error(e)
                sys.exit(1)
        else:
            help_fun()
            lggr.error('Wrong Input')
            sys.exit(1)
    except KeyboardInterrupt:
        lggr.error('Keyboard Interrupt')
        print (Bcolors.FAIL + '\n Keyboard Interrupt ' + Bcolors.ENDC)
        lggr.error('Keyboard Interrupt')
        sys.exit(1)
    except Exception as e:
        print (Bcolors.FAIL + "\n \tERROR!.%s \n" % e + Bcolors.ENDC)
        lggr.error(e)
        sys.exit(1)
    finally:
        print (Bcolors.HEADER + "*" * 80 + Bcolors.ENDC)
